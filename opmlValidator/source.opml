<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Mon, 15 Apr 2024 14:38:51 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes https://drummer.land. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: opmlValidator</title>
		<dateCreated>Thu, 15 Sep 2016 16:29:43 GMT</dateCreated>
		<dateModified>Mon, 15 Apr 2024 14:38:51 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 6, 23</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>155</windowTop>
		<windowLeft>813</windowLeft>
		<windowBottom>1012</windowBottom>
		<windowRight>2131</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/opmlvalidator/">
			<outline text="worknotes.md" created="Thu, 19 Aug 2021 20:59:15 GMT">
				<outline text="#### 4/15/24; 10:35:05 AM by DW" created="Mon, 15 Apr 2024 14:35:05 GMT">
					<outline text="We were flagging legal uses of &amp; and &lt; as errors. No longer doing that. " created="Mon, 15 Apr 2024 14:35:06 GMT"/>
					<outline text="Thanks for the &lt;a href=&quot;https://github.com/scripting/opml.org/issues/17&quot;&gt;report&lt;/a&gt;. " created="Mon, 15 Apr 2024 14:35:31 GMT"/>
					</outline>
				<outline text="#### 4/13/23; 10:27:18 AM by DW" created="Thu, 13 Apr 2023 14:27:17 GMT">
					<outline text="When checking the version of a node of type &quot;outline&quot;, we had the check for the existence of the version attribute wrong, it should've been !== instead of ===." created="Thu, 13 Apr 2023 14:27:18 GMT"/>
					</outline>
				<outline text="#### 8/19/21; 4:59:20 PM by DW" created="Thu, 19 Aug 2021 20:59:19 GMT">
					<outline text="It used to save the validator at /dev.opml.org/validator/" created="Thu, 19 Aug 2021 20:59:20 GMT"/>
					</outline>
				</outline>
			<outline text="code.js">
				<outline text="const myVersion = &quot;0.4.2&quot;, myProductName = &quot;opmlValidator&quot;; " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text="" created="Thu, 13 Apr 2023 14:29:11 GMT"/>
				<outline text="var opmlValidatorData = {">
					<outline text="strings: {">
						<outline text="congratulations: &quot;Congratulations! Your OPML file validates.&quot;,"/>
						<outline text="validatedImage: &quot;&lt;img src=\&quot;http://images.scripting.com/archiveScriptingCom/2005/10/31/valid3.gif\&quot; width=\&quot;114\&quot; height=\&quot;20\&quot; border=\&quot;0\&quot; alt=\&quot;OPML checked by validator.opml.org.\&quot;&gt;&quot;,"/>
						<outline text="notValidXml: &quot;The text in the file is not valid XML. You can use an &lt;a href=\&quot;http://www.google.com/search?q=xml+validator\&quot; target=\&quot;blank\&quot;&gt;XML validator&lt;/a&gt; first to find and fix the problems, then try again with the OPML Validator.&quot;,"/>
						<outline text="mustHaveOpml: &quot;The top level-element in an OPML document must be named opml.&quot;,"/>
						<outline text="opmlVersionMustBe: &quot;The \&quot;version\&quot; attribute for the opml element must be 1.0, 1.1 or 2.0.&quot;,"/>
						<outline text="mustHaveHead: &quot;The &lt;opml&gt; element must have a &lt;head&gt; sub-element.&quot;,"/>
						<outline text="mustHaveBody: &quot;The &lt;opml&gt; element must have a &lt;body&gt; sub-element.&quot;,"/>
						<outline text="outlineOnlyInBody: &quot;&lt;outline&gt; elements should only appear inside the &lt;body&gt; element.&quot;,"/>
						<outline text="mustBeEncoded: &quot;The following characters must be encoded: &amp;, &lt;.&quot;,"/>
						<outline text="outlineMustHaveText: &quot;An &lt;outline&gt; element must have a \&quot;text\&quot; attribute.&quot;,"/>
						<outline text="outlineUnknownAttribute: &quot;An &lt;outline&gt; element should only have known attributes. Unknown: &quot;,"/>
						<outline text="rssNodeMustHaveXmlUrl: &quot;An &lt;outline&gt; element whose type is \&quot;rss\&quot; must have an \&quot;xmlUrl\&quot; attribute.&quot;,"/>
						<outline text="rssVersionWrong: &quot;An &lt;outline&gt; element whose type is \&quot;rss\&quot; may have a version attribute, whose value must be RSS, RSS1, RSS2, or scriptingNews.&quot;,"/>
						<outline text="linkNodeMustHaveUrl: &quot;An &lt;outline&gt; element whose type is \&quot;link\&quot; must have an \&quot;url\&quot; attribute.&quot;,"/>
						<outline text="includeNodeMustHaveUrl: &quot;An &lt;outline&gt; element whose type is \&quot;include\&quot; must have a \&quot;url\&quot; attribute.&quot;,"/>
						<outline text="unknownOutlineType: &quot;The type attribute on an &lt;outline&gt; element should be a known type.&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="legalAttributes: {">
						<outline text="common: [&quot;text&quot;, &quot;type&quot;, &quot;created&quot;, &quot;isComment&quot;, &quot;isBreakpoint&quot;, &quot;category&quot;],"/>
						<outline text="include: [&quot;url&quot;],"/>
						<outline text="link: [&quot;url&quot;],"/>
						<outline text="rss: [&quot;xmlUrl&quot;, &quot;description&quot;, &quot;htmlUrl&quot;, &quot;language&quot;, &quot;title&quot;, &quot;version&quot;]"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="var appPrefs = {">
					<outline text="lastOpmlUrl: undefined"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function savePrefs () {">
					<outline text="localStorage.savedPrefs = jsonStringify (appPrefs);"/>
					<outline text="}"/>
					</outline>
				<outline text="function expandTopLevel (theOutline) {">
					<outline text="if (theOutline.subs !== undefined) {">
						<outline text="for (var i = 0; i &lt; theOutline.subs.length; i++) {">
							<outline text="theOutline.subs [i].collapse = false;"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function collapseEverything (theOutline, belowLevel) {">
					<outline text="Changes" isComment="true">
						<outline text="6/26/15; 3:52:35 PM by DW">
							<outline text="The top level heads are at level 0. Set the collapse attribute on everything below the indicated level to true."/>
							<outline text="If you call it with belowLevel == 1, all the top level heads are expanded, and everything below the top level is collapsed."/>
							</outline>
						</outline>
					<outline text="function doCollapse (theOutline, level) {">
						<outline text="" isComment="true"/>
						<outline text="console.log (&quot;doCollapse: level == &quot; + level + &quot;, theOutline.text == &quot; + theOutline.text);" isComment="true"/>
						<outline text="" isComment="true"/>
						<outline text="if (theOutline.subs !== undefined) {">
							<outline text="theOutline.collapse = level &gt; belowLevel;"/>
							<outline text="theOutline.level = level;" isComment="true"/>
							<outline text="for (var i = 0; i &lt; theOutline.subs.length; i++) {">
								<outline text="doCollapse (theOutline.subs [i], level + 1);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="doCollapse (theOutline, 0);"/>
					<outline text="}"/>
					</outline>
				<outline text="function doValidate () {">
					<outline text="var urlOpml = $(&quot;#idUrlInput&quot;).val ();"/>
					<outline text="appPrefs.lastOpmlUrl = urlOpml;"/>
					<outline text="savePrefs ();"/>
					<outline text=""/>
					<outline text="var adrLastError, htmltext = &quot;&quot;, cterrors = 0;"/>
					<outline text="function add (s) {">
						<outline text="htmltext += s + &quot;\n&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="function addErrorMessage (errorstring) {" created="Thu, 27 Oct 2005 20:23:28 GMT">
						<outline text="cterrors++;"/>
						<outline text="add (&quot;&lt;li&gt;&quot; + errorstring + &quot;&lt;/li&gt;&quot;)" created="Thu, 27 Oct 2005 20:24:02 GMT"/>
						<outline text="}"/>
						</outline>
					<outline text="function addError (adr, errorstring) {">
						<outline text="if (adr !== adrLastError) {">
							<outline text="addErrorMessage (errorstring + &quot;&lt;br&gt;&lt;div class=\&quot;divCode\&quot;&gt;&quot; + encodeXml (adr.outerHTML) + &quot;&lt;/div&gt;&quot;);" created="Thu, 27 Oct 2005 20:22:37 GMT"/>
							<outline text="console.log (errorstring);"/>
							<outline text="adrLastError = adr;"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function requiredSubelement (adrparent, namesubelement, errorstring, callback) {" created="Wed, 26 Oct 2005 18:00:34 GMT">
						<outline text="Changes" isComment="true">
							<outline text="9/17/16; 1:20:07 PM by DW">
								<outline text="Return true if the element exists, return false if not, and add an error to the output stream." isComment="true" created="Wed, 26 Oct 2005 18:01:12 GMT"/>
								</outline>
							</outline>
						<outline text="var adrsubelement;"/>
						<outline text="try {">
							<outline text="adrsubelement = xmlGetAddress (adrparent, namesubelement)" created="Wed, 26 Oct 2005 18:02:31 GMT"/>
							<outline text="}"/>
							</outline>
						<outline text="catch (err) {">
							<outline text="console.log (&quot;requiredSubelement: err.message == &quot; + err.message);"/>
							<outline text="addError (adrparent, errorstring);" created="Wed, 26 Oct 2005 18:03:17 GMT"/>
							<outline text="callback (false, adrsubelement);"/>
							<outline text="}"/>
							</outline>
						<outline text="if (adrsubelement.length == 0) {">
							<outline text="addError (adrparent, errorstring);" created="Wed, 26 Oct 2005 18:03:17 GMT"/>
							<outline text="callback (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;Passed: &quot; + errorstring);"/>
							<outline text="callback (true, adrsubelement);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function checkOutlinesOutsideBody (adropml) {">
						<outline text="var level = 0, ctErrors = 0;"/>
						<outline text="function visit (adrx) {">
							<outline text="$(adrx).children ().each (function () {">
								<outline text="var name = $(this).prop (&quot;tagName&quot;);" created="Thu, 07 Nov 2013 15:58:07 GMT" pgfnum="31082"/>
								<outline text="console.log (filledString (&quot;\t&quot;, level) + name);"/>
								<outline text="if (name !== &quot;body&quot;) {">
									<outline text="level++;"/>
									<outline text="visit (this);"/>
									<outline text="level--;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="if (name === &quot;outline&quot;) {">
										<outline text="addError (this, opmlValidatorData.strings.outlineOnlyInBody)" created="Wed, 26 Oct 2005 18:43:51 GMT"/>
										<outline text="ctErrors++;"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="visit (adropml);"/>
						<outline text="if (ctErrors == 0) {">
							<outline text="console.log (&quot;Passed: &quot; + opmlValidatorData.strings.outlineOnlyInBody);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function checkForUnencodedCharacters (adrstruct) {">
						<outline text="var level = 0, ctErrors = 0, ch;"/>
						<outline text="function visit (adrx) {">
							<outline text="var atts = new Object ();"/>
							<outline text="function checkString (s) {">
								<outline text="for (var i = 0; i &lt; s.length; i++) {">
									<outline text="ch = s [i];"/>
									<outline text="switch (ch) {">
										<outline text="case &quot;&lt;&quot;:">
											<outline text="addError (adrx, opmlValidatorData.strings.mustBeEncoded);" created="Wed, 26 Oct 2005 18:43:51 GMT"/>
											<outline text="ctErrors++;"/>
											<outline text="return (false); //at most one error message per line" created="Mon, 07 Nov 2005 17:00:41 GMT"/>
											</outline>
										<outline text="case &quot;&amp;&quot;:">
											<outline text="//handle entities like &amp;quot; &amp;#123;"/>
											<outline text="var entity = &quot;&amp;&quot;, flcomplete = false;"/>
											<outline text="for (var j = i + 1; j &lt; s.length; j++) {">
												<outline text="entity += s [j];"/>
												<outline text="if (s [j] == &quot;;&quot;) {">
													<outline text="flcomplete = true;"/>
													<outline text="break;"/>
													<outline text="}"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="if (flcomplete) {">
												<outline text="var flGoodEntity = false;" created="Mon, 07 Nov 2005 16:59:17 GMT"/>
												<outline text="switch (entity) {" created="Mon, 07 Nov 2005 16:58:12 GMT">
													<outline text="case &quot;&amp;amp;&quot;:" created="Mon, 07 Nov 2005 16:58:18 GMT"/>
													<outline text="case &quot;&amp;lt;&quot;:" created="Mon, 07 Nov 2005 16:58:57 GMT"/>
													<outline text="case &quot;&amp;gt;&quot;:" created="Mon, 07 Nov 2005 16:59:06 GMT"/>
													<outline text="case &quot;&amp;apos;&quot;:" created="Mon, 07 Nov 2005 16:59:08 GMT"/>
													<outline text="case &quot;&amp;&quot; + &quot;quot;&quot;:" created="Mon, 07 Nov 2005 16:59:11 GMT">
														<outline text="flGoodEntity = true" created="Mon, 07 Nov 2005 16:59:17 GMT"/>
														</outline>
													<outline text="}"/>
													</outline>
												<outline text="if (!flGoodEntity) {">
													<outline text="if (beginsWith (entity, &quot;&amp;#&quot;)) {">
														<outline text="var numstring = stringDelete (entity, 1, 2);"/>
														<outline text="if (endsWith (numstring, &quot;;&quot;)) {">
															<outline text="numstring = stringDelete (numstring, numstring.length, 1);"/>
															<outline text="try {">
																<outline text="var num = Number (numstring);"/>
																<outline text="flGoodEntity = true;"/>
																<outline text="}"/>
																</outline>
															<outline text="catch (err) {">
																<outline text="}"/>
																</outline>
															<outline text="}"/>
															</outline>
														<outline text="}"/>
														</outline>
													<outline text="}"/>
													</outline>
												<outline text="if (!flGoodEntity) {">
													<outline text="addError (adrx, opmlValidatorData.strings.mustBeEncoded);" created="Wed, 26 Oct 2005 18:43:51 GMT"/>
													<outline text="ctErrors++;"/>
													<outline text="return (false); //at most one error message per line" created="Mon, 07 Nov 2005 17:00:41 GMT"/>
													<outline text="}"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="else {">
												<outline text="addError (adrx, opmlValidatorData.strings.mustBeEncoded);" created="Wed, 26 Oct 2005 18:43:51 GMT"/>
												<outline text="ctErrors++;"/>
												<outline text="return (false); //at most one error message per line" created="Mon, 07 Nov 2005 17:00:41 GMT"/>
												<outline text="}"/>
												</outline>
											<outline text="break;"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="xmlGatherAttributes (adrx, atts);"/>
							<outline text="console.log (&quot;checkForUnencodedCharacters: &quot; + jsonStringify (atts));" isComment="true"/>
							<outline text=""/>
							<outline text="for (var x in atts) {">
								<outline text="checkString (atts [x]); "/>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="$(adrx).children ().each (function () {">
								<outline text="var name = $(this).prop (&quot;tagName&quot;);" created="Thu, 07 Nov 2013 15:58:07 GMT" pgfnum="31082"/>
								<outline text="console.log (filledString (&quot;\t&quot;, level) + name);" isComment="true"/>
								<outline text="level++;"/>
								<outline text="visit (this);"/>
								<outline text="level--;"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="visit (adrstruct);"/>
						<outline text="if (ctErrors == 0) {">
							<outline text="console.log (&quot;Passed: &quot; + opmlValidatorData.strings.mustBeEncoded);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function validateOutline (adroutline) {">
						<outline text="var level = 0, ctErrors = 0;"/>
						<outline text="function nameNotInArray (name, array) {">
							<outline text="if (array !== undefined) {">
								<outline text="for (var i = 0; i &lt; array.length; i++) {">
									<outline text="if (array [i] == name) {">
										<outline text="return (false); //it's in the array"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="return (true); //it's not in the array"/>
							<outline text="}"/>
							</outline>
						<outline text="function visit (adrx) {">
							<outline text="$(adrx).children ().each (function () {">
								<outline text="var tagname = $(this).prop (&quot;tagName&quot;);" created="Thu, 07 Nov 2013 15:58:07 GMT" pgfnum="31082"/>
								<outline text="if (tagname == &quot;outline&quot;) {">
									<outline text="var atts = new Object ();"/>
									<outline text="xmlGatherAttributes (this, atts);"/>
									<outline text="if (atts.text === undefined) {">
										<outline text="addError (this, opmlValidatorData.strings.outlineMustHaveText)" created="Wed, 26 Oct 2005 18:43:51 GMT"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="console.log (filledString (&quot;\t&quot;, level) + atts.text);"/>
										<outline text="}"/>
										</outline>
									<outline text=""/>
									<outline text="var type = atts.type;"/>
									<outline text="if (type !== undefined) {">
										<outline text="switch (type) {">
											<outline text="case &quot;rss&quot;:">
												<outline text="if (atts.xmlUrl === undefined) {">
													<outline text="addError (this, opmlValidatorData.strings.rssNodeMustHaveXmlUrl)" created="Wed, 26 Oct 2005 18:43:51 GMT"/>
													<outline text="}"/>
													</outline>
												<outline text="if (atts.version !== undefined) { //4/13/23 by DW">
													<outline text="if ((atts.version != &quot;RSS1&quot;) &amp;&amp; (atts.version != &quot;RSS2&quot;) &amp;&amp; (atts.version != &quot;RSS&quot;) &amp;&amp; (atts.version != &quot;scriptingNews&quot;)) {" created="Fri, 28 Oct 2005 19:17:00 GMT">
														<outline text="addError (this, opmlValidatorData.strings.rssVersionWrong);" created="Wed, 26 Oct 2005 18:43:51 GMT"/>
														<outline text="}"/>
														</outline>
													<outline text="}"/>
													</outline>
												<outline text="break;"/>
												</outline>
											<outline text="case &quot;link&quot;:">
												<outline text="if (atts.url === undefined) {">
													<outline text="addError (this, opmlValidatorData.strings.linkNodeMustHaveUrl)" created="Wed, 26 Oct 2005 18:43:51 GMT"/>
													<outline text="}"/>
													</outline>
												<outline text="break;"/>
												</outline>
											<outline text="case &quot;include&quot;:">
												<outline text="if (atts.url === undefined) {">
													<outline text="addError (this, opmlValidatorData.strings.includeNodeMustHaveUrl)" created="Wed, 26 Oct 2005 18:43:51 GMT"/>
													<outline text="}"/>
													</outline>
												<outline text="break;"/>
												</outline>
											<outline text="default: ">
												<outline text="addError (this, opmlValidatorData.strings.unknownOutlineType);" created="Wed, 26 Oct 2005 18:43:51 GMT"/>
												<outline text="break;"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="for (var attname in atts) {">
										<outline text="console.log (attname);" isComment="true"/>
										<outline text="if (nameNotInArray (attname, opmlValidatorData.legalAttributes.common) &amp;&amp; nameNotInArray (attname, opmlValidatorData.legalAttributes [type])) {">
											<outline text="addError (this, opmlValidatorData.strings.outlineUnknownAttribute + attname);" created="Wed, 26 Oct 2005 18:43:51 GMT"/>
											<outline text="return (false);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="level++;"/>
								<outline text="visit (this);"/>
								<outline text="level--;"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="visit (adroutline);"/>
						<outline text="}"/>
						</outline>
					<outline text="function getValidatedImage () {">
						<outline text="var s = opmlValidatorData.strings.validatedImage;"/>
						<outline text="s = &quot;&lt;span class=\&quot;spValidatedImage\&quot;&gt;&lt;a href=\&quot;&quot; + urlOpml + &quot;\&quot;&gt;&quot; + s + &quot;&lt;/span&gt;&quot;;"/>
						<outline text="return (s);"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="readHttpFileThruProxy (urlOpml, undefined, function (opmltext) {">
						<outline text="var xstruct;"/>
						<outline text="try {">
							<outline text="xstruct = $($.parseXML (opmltext));"/>
							<outline text="}"/>
							</outline>
						<outline text="catch (err) {">
							<outline text="$(&quot;#idValidationMessage&quot;).html (&quot;&lt;p&gt;&quot; + opmlValidatorData.strings.notValidXml + &quot;&lt;/p&gt;&quot;);"/>
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="requiredSubelement (xstruct, &quot;opml&quot;, opmlValidatorData.strings.mustHaveOpml, function (flGood, adropml) {">
							<outline text="if (flGood) {">
								<outline text="var version=  xmlGetAttribute (adropml, &quot;version&quot;);"/>
								<outline text="console.log (&quot;doValidate: version == &quot; + version);"/>
								<outline text=""/>
								<outline text="var flGoodVersion = (version === &quot;1.0&quot;) || (version === &quot;1.1&quot;) || (version === &quot;2.0&quot;);"/>
								<outline text="if (!flGoodVersion) {">
									<outline text="addError (adropml, opmlValidatorData.strings.opmlVersionMustBe);" created="Wed, 26 Oct 2005 18:43:51 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text="requiredSubelement (adropml, &quot;head&quot;, opmlValidatorData.strings.mustHaveHead, function (flGood, adrhead) {">
									<outline text="requiredSubelement (adropml, &quot;body&quot;, opmlValidatorData.strings.mustHaveBody, function (flGood, adrbody) {">
										<outline text="checkOutlinesOutsideBody (adropml);"/>
										<outline text="checkForUnencodedCharacters (adropml); //4/15/24 by DW -- commented" isComment="true"/>
										<outline text="validateOutline (adrbody);" created="Wed, 26 Oct 2005 19:01:50 GMT"/>
										<outline text=""/>
										<outline text="if (cterrors == 0) {">
											<outline text="htmltext = opmlValidatorData.strings.congratulations + getValidatedImage ();"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="htmltext = &quot;&lt;ul&gt;&quot; + htmltext + &quot;&lt;/ul&gt;&quot;;"/>
											<outline text="}"/>
											</outline>
										<outline text="$(&quot;#idValidationMessage&quot;).html (htmltext);"/>
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text=""/>
						<outline text="//show the outline itself" isComment="true">
							<outline text="var adrbody = getXstuctBody (xstruct);"/>
							<outline text="var theOutline = outlineToJson (adrbody, &quot;outline&quot;);"/>
							<outline text="theOutline.text = &quot;&quot;;"/>
							<outline text="collapseEverything (theOutline, 0);"/>
							<outline text="$(&quot;#idOutlineForDisplay&quot;).html (riverRenderOutline (theOutline.subs [0], false, undefined, undefined, false));"/>
							<outline text="$(&quot;#idOutlineForDisplay&quot;).css (&quot;visibility&quot;, &quot;visible&quot;);"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="}"/>
					</outline>
				<outline text="function startup () {">
					<outline text="console.log (&quot;startup&quot;);"/>
					<outline text="if (localStorage.savedPrefs !== undefined) {">
						<outline text="appPrefs = JSON.parse (localStorage.savedPrefs);"/>
						<outline text="$(&quot;#idUrlInput&quot;).val (appPrefs.lastOpmlUrl);"/>
						<outline text="}"/>
						</outline>
					<outline text="self.setInterval (everySecond, 1000); "/>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="index.html">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;OPML Validator&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/browsers/riverbrowser.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/shared/xml.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/shared/reader.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;code.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;style&gt;" created="Wed, 11 Sep 2013 14:27:45 GMT" pgfnum="30095">
							<outline text="body {">
								<outline text="font-family: Ubuntu;"/>
								<outline text="font-size: 18px;"/>
								<outline text="background-color: whitesmoke;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPageBody {">
								<outline text="width: 60%;"/>
								<outline text="margin-top: 90px;"/>
								<outline text="margin-left: auto;"/>
								<outline text="margin-right: auto;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPrompt {">
								<outline text="margin-top: 1em;"/>
								<outline text="margin-bottom: .5em;"/>
								<outline text="margin-left: 5px;"/>
								<outline text="}"/>
								</outline>
							<outline text="input[type=&quot;text&quot;] {">
								<outline text="font-family: &quot;Ubuntu&quot;;"/>
								<outline text="font-size: 18px;"/>
								<outline text="padding: 5px;"/>
								<outline text="width: 100%;"/>
								<outline text="height: 2em;"/>
								<outline text="display: block;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divValidatorDialog {">
								<outline text="width: 80%;"/>
								<outline text="}"/>
								</outline>
							<outline text=".btnValidate {">
								<outline text="float: right;"/>
								<outline text="font-family: &quot;Ubuntu&quot;;"/>
								<outline text="font-size: 16px;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divValidationMessage {">
								<outline text="margin-top: 60px;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divValidationMessage p {">
								<outline text="line-height: 140%;"/>
								<outline text="}"/>
								</outline>
							<outline text=".spValidatedImage {">
								<outline text="margin-left: .5em;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divOutlineForDisplay {">
								<outline text="margin-top: 20px;"/>
								<outline text="border: 1px solid silver;"/>
								<outline text="background-color: white;"/>
								<outline text="padding-left: 30px;"/>
								<outline text="padding-top: 10px;"/>
								<outline text="padding-bottom: 10px;"/>
								<outline text="visibility: hidden;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divOutlineForDisplay ul {">
								<outline text="margin-left: 15px;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divOutlineForDisplay .divOutlineText {">
								<outline text="font-size: 17px;"/>
								<outline text="line-height: 160%;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divOutlineForDisplay .divOutlineHead .aOutlineTextLink {">
								<outline text="color: black;"/>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text=".divValidationMessage ul {">
								<outline text="list-style-type: none;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divValidationMessage li {">
								<outline text="font-weight: bold;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divCode {">
								<outline text="font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace;"/>
								<outline text="font-size: 14px;"/>
								<outline text="margin-top: .5em;"/>
								<outline text="margin-bottom: 1.3em;"/>
								<outline text="}"/>
								</outline>
							<outline text="&lt;/style&gt;" created="Wed, 11 Sep 2013 14:30:17 GMT" pgfnum="30105"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;h1&gt;The OPML Validator&lt;/h1&gt;"/>
							<outline text="&lt;div class=&quot;divValidatorDialog&quot;&gt;">
								<outline text="&lt;div class=&quot;divPrompt&quot;&gt;">
									<outline text="Enter the URL of an OPML file you want to validate:"/>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;input id=&quot;idUrlInput&quot; type=&quot;text&quot; name=&quot;url&quot; placeholder=&quot;Enter the URL of your OPML file here.&quot;&gt;"/>
								<outline text="&lt;button class=&quot;btn btnValidate btnPrimary&quot; onclick=&quot;doValidate ()&quot;&gt;">
									<outline text="&lt;i class='fa fa-check'&gt;&lt;/i&gt; Validate"/>
									<outline text="&lt;/button&gt;"/>
									</outline>
								<outline text="&lt;div class=&quot;divValidationMessage&quot; id=&quot;idValidationMessage&quot;&gt;">
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;div class=&quot;divOutlineForDisplay&quot; id=&quot;idOutlineForDisplay&quot;&gt;">
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;p&gt;PS: The JavaScript source is available &lt;a href=&quot;https://github.com/scripting/opml.org/blob/main/opmlValidator/code.js&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;" created="Sat, 21 Aug 2021 14:56:52 GMT"/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			<outline text="readme.md" created="Thu, 19 Aug 2021 21:10:04 GMT">
				<outline text="# OPML validator" created="Fri, 02 Jul 2021 14:57:50 GMT">
					<outline text="Runs in the browser, I wrote this years ago, haven't looked at it in a while. Maybe you'll find it useful?" created="Sun, 04 Jul 2021 17:13:30 GMT"/>
					<outline text="You can run the validator &lt;a href=&quot;http://scripting.com/code/opmlvalidator/&quot;&gt;here&lt;/a&gt;. " created="Fri, 20 Aug 2021 00:40:48 GMT"/>
					<outline text="8/19/21 by DW" created="Thu, 19 Aug 2021 21:12:12 GMT"/>
					</outline>
				</outline>
			<outline text="test/encoding.opml">
				<outline text="Hey &lt;a href=&quot;http://scripting.com/2016/10/01/donaldTrumpAsCaptainQueeg.html&quot;&gt;this&lt;/a&gt; is a link."/>
				</outline>
			<outline text="test/encoding.txt">
				<outline text="&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;"/>
				<outline text="&lt;opml version=&quot;2.0&quot;&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;test/encoding.opml&lt;/title&gt;"/>
						<outline text="&lt;dateModified&gt;Sat, 01 Oct 2016 22:26:24 GMT&lt;/dateModified&gt;"/>
						<outline text="&lt;expansionState&gt;&lt;/expansionState&gt;"/>
						<outline text="&lt;vertScrollState&gt;1&lt;/vertScrollState&gt;"/>
						<outline text="&lt;windowTop&gt;300&lt;/windowTop&gt;"/>
						<outline text="&lt;windowLeft&gt;700&lt;/windowLeft&gt;"/>
						<outline text="&lt;windowBottom&gt;900&lt;/windowBottom&gt;"/>
						<outline text="&lt;windowRight&gt;1500&lt;/windowRight&gt;"/>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;outline text=&quot;Hey &lt;a href=&amp;quot;http://scripting.com/2016/10/01/donaldTrumpAsCaptainQueeg.html&amp;quot;&amp;gt;this&amp;lt;/a&amp;gt; is a link.&quot;&gt;&lt;/outline&gt;"/>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/opml&gt;"/>
					</outline>
				</outline>
			</outline>
		<outline text="/dev.opml.org/testing/validator/" isComment="true">
			<outline text="lib/utils.js">
				<outline text="var fs = require (&quot;fs&quot;);"/>
				<outline text=""/>
				<outline text="exports.beginsWith = beginsWith; "/>
				<outline text="exports.endsWith = endsWith;"/>
				<outline text="exports.stringCountFields = stringCountFields;"/>
				<outline text="exports.stringDelete = stringDelete;"/>
				<outline text="exports.stringMid = stringMid;"/>
				<outline text="exports.padWithZeros = padWithZeros;"/>
				<outline text="exports.getDatePath = getDatePath;"/>
				<outline text="exports.secondsSince = secondsSince;"/>
				<outline text="exports.bumpUrlString = bumpUrlString;"/>
				<outline text="exports.stringContains = stringContains;"/>
				<outline text="exports.sameDay = sameDay;"/>
				<outline text="exports.jsonStringify = jsonStringify;"/>
				<outline text="exports.stringNthField = stringNthField;"/>
				<outline text="exports.getBoolean = getBoolean;"/>
				<outline text="exports.isAlpha = isAlpha;"/>
				<outline text="exports.isNumeric = isNumeric;"/>
				<outline text="exports.stringLastField = stringLastField;"/>
				<outline text="exports.multipleReplaceAll = multipleReplaceAll;"/>
				<outline text="exports.replaceAll = replaceAll; //2/17/15 by DW"/>
				<outline text="exports.kilobyteString = kilobyteString;"/>
				<outline text="exports.megabyteString = megabyteString;"/>
				<outline text="exports.gigabyteString = gigabyteString;"/>
				<outline text="exports.stringLower = stringLower;"/>
				<outline text="exports.filledString = filledString;"/>
				<outline text="exports.innerCaseName = innerCaseName;"/>
				<outline text="exports.copyScalars = copyScalars;"/>
				<outline text="exports.stripMarkup = stripMarkup;"/>
				<outline text="exports.replaceAll = replaceAll;"/>
				<outline text="exports.hotUpText = hotUpText;"/>
				<outline text="exports.secondsSince = secondsSince;"/>
				<outline text="exports.encodeXml = encodeXml;"/>
				<outline text="exports.getFileModDate = getFileModDate; //8/26/15 by DW"/>
				<outline text="exports.getRandomPassword = getRandomPassword; //8/28/15  by DW"/>
				<outline text="exports.trimWhitespace = trimWhitespace; //9/1/15 by DW"/>
				<outline text="exports.viewDate = viewDate; //11/29/15 by DW"/>
				<outline text="exports.stringPopExtension = stringPopExtension; //6/6/16 by DW"/>
				<outline text="exports.dateYesterday = dateYesterday; //9/7/16 by DW"/>
				<outline text="exports.getRandomSnarkySlogan = getRandomSnarkySlogan; //9/8/16 by DW"/>
				<outline text=""/>
				<outline text="[[http://fargo.io/code/node/shared/utils.js]]"/>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;opmlValidator&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Reboot of the OPML Validator, this time in JavaScript.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.40.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;opmlparser&quot;: &quot;*&quot;,"/>
						<outline text="&quot;request&quot;: &quot;*&quot;"/>
						<outline text="}, "/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;engines&quot;: {">
						<outline text="&quot;node&quot;: &quot;0.10.*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="lib/opml.js">
				<outline text="exports.readOpmlString = readOpmlString;"/>
				<outline text="exports.readOpmlFile = readOpmlFile;"/>
				<outline text="exports.readOpmlUrl = readOpmlUrl;"/>
				<outline text="exports.outlineVisiter = outlineVisiter;"/>
				<outline text=""/>
				<outline text="var request = require (&quot;request&quot;);"/>
				<outline text="var stream = require (&quot;stream&quot;); //6/23/15 by DW"/>
				<outline text="var opmlParser = require (&quot;opmlparser&quot;); //6/23/15 by DW"/>
				<outline text=""/>
				<outline text="[[http://fargo.io/code/shared/opml.js]]"/>
				</outline>
			<outline text="config.json" isComment="true">
				<outline text="{">
					<outline text="&quot;urlLinkblogFeed&quot;: &quot;http://radio3.io/users/davewiner/rss.xml&quot;,"/>
					<outline text="&quot;s3PathNightlyFeed&quot;: &quot;/scripting.com/misc/nightlyLinks.xml&quot;,"/>
					<outline text="&quot;emailSendTo&quot;: &quot;daves-linkblog@googlegroups.com&quot;,"/>
					<outline text="&quot;emailSendFrom&quot;: &quot;dave.winer@gmail.com&quot;,"/>
					<outline text="&quot;titleTemplate&quot;: &quot;&lt;h1&gt;Dave Winer's links for [date] &lt;/h1&gt;\n\n&quot;"/>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="opmlvalidator.js">
				<outline text="var myProductName = &quot;opmlValidator&quot;, myVersion = &quot;0.40a&quot;, myPort = 1111;"/>
				<outline text="var utils = require (&quot;./lib/utils.js&quot;);"/>
				<outline text="var opmlLib = require (&quot;./lib/opml.js&quot;); "/>
				<outline text="var http = require (&quot;http&quot;); " created="Thu, 26 Dec 2013 23:02:58 GMT" pgfnum="34549"/>
				<outline text="var urlpack = require (&quot;url&quot;);" created="Tue, 21 Jan 2014 00:09:23 GMT" pgfnum="36074"/>
				<outline text="var request = require (&quot;request&quot;);"/>
				<outline text=""/>
				<outline text="function doValidate (url, callback) {">
					<outline text="var returnedObject = {">
						<outline text="flError: true,"/>
						<outline text="message: &quot;&quot;,"/>
						<outline text="ctCharsInFile: 0"/>
						<outline text="};"/>
						</outline>
					<outline text="console.log (&quot;doValidate: url == &quot; + url);"/>
					<outline text="request (url, function (err, response, opmltext) {">
						<outline text="var xstruct;"/>
						<outline text="if (err) {">
							<outline text="returnedObject.message = err.message;"/>
							<outline text="console.log (&quot;doValidate: err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="returnedObject.ctCharsInFile = opmltext.length;"/>
							<outline text="opmlLib.readOpmlString (opmltext, function (theOutline, err) {">
								<outline text="if (err) {">
									<outline text="returnedObject.message = err.message;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="returnedObject.theOutline = theOutline;"/>
									<outline text="returnedObject.flError = false;"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="callback (returnedObject);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function handleRequest (httpRequest, httpResponse) {">
					<outline text="function writeHead (type) {">
						<outline text="if (type == undefined) {">
							<outline text="type = &quot;text/plain&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: type, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"/>
						<outline text="}"/>
						</outline>
					<outline text="function return404 () {">
						<outline text="get404page (function (s, type) {">
							<outline text="httpResponse.writeHead (404, {&quot;Content-Type&quot;: type, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"/>
							<outline text="httpResponse.end (s);    "/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function returnRedirect (url) {">
						<outline text="httpResponse.writeHead (302, {&quot;location&quot;: url});"/>
						<outline text="httpResponse.end (&quot;Redirect to this URL: &quot; + url);"/>
						<outline text="}"/>
						</outline>
					<outline text="function respondWithObject (obj) {">
						<outline text="writeHead (&quot;application/json&quot;);"/>
						<outline text="httpResponse.end (utils.jsonStringify (obj));    "/>
						<outline text="}"/>
						</outline>
					<outline text="try {" created="Tue, 29 Apr 2014 21:25:20 GMT" pgfnum="40664">
						<outline text="var parsedUrl = urlpack.parse (httpRequest.url, true), now = new Date (), startTime = now;" created="Tue, 21 Jan 2014 00:21:43 GMT" pgfnum="36078"/>
						<outline text="var lowerpath = parsedUrl.pathname.toLowerCase ();"/>
						<outline text="switch (httpRequest.method) {" created="Thu, 01 May 2014 20:42:04 GMT" pgfnum="40803">
							<outline text="case &quot;GET&quot;:" created="Thu, 01 May 2014 20:42:39 GMT" pgfnum="40807">
								<outline text="console.log (lowerpath);"/>
								<outline text="switch (lowerpath) {">
									<outline text="case &quot;/validate&quot;:">
										<outline text="var url = parsedUrl.query.url;"/>
										<outline text="doValidate (url, function (jstruct) {">
											<outline text="respondWithObject (jstruct);"/>
											<outline text="});"/>
											</outline>
										<outline text="break;"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="break;" created="Thu, 01 May 2014 20:42:44 GMT" pgfnum="40808"/>
								</outline>
							<outline text="case &quot;POST&quot;: //12/2/14 by DW" isComment="true" created="Thu, 01 May 2014 20:42:24 GMT" pgfnum="40805">
								<outline text="var body = &quot;&quot;;"/>
								<outline text="console.log (lowerpath);"/>
								<outline text="httpRequest.on (&quot;data&quot;, function (data) {">
									<outline text="body += data;"/>
									<outline text="});"/>
									</outline>
								<outline text="httpRequest.on (&quot;end&quot;, function () {">
									<outline text="console.log (&quot;POST body length: &quot; + body.length);"/>
									<outline text="switch (lowerpath) {" created="Thu, 01 May 2014 21:24:18 GMT" pgfnum="40824">
										<outline text="case &quot;/hellofromslack.js&quot;: ">
											<outline text="var returntext = &quot;Hello Uncle Davey.&quot;;"/>
											<outline text="console.log (&quot;/hellofromslack.js: body == &quot; + body);" isComment="true"/>
											<outline text=""/>
											<outline text="incomingSlackHook (body);"/>
											<outline text=""/>
											<outline text="respondWithObject ({});"/>
											<outline text="break;"/>
											</outline>
										<outline text="default: //404 not found" created="Tue, 21 Jan 2014 00:38:22 GMT" pgfnum="36084">
											<outline text="httpResponse.writeHead (404, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"/>
											<outline text="httpResponse.end (&quot;\&quot;&quot; + lowerpath + &quot;\&quot; is not one of the endpoints defined by this server.&quot;);"/>
											</outline>
										<outline text="}" created="Thu, 01 May 2014 21:24:25 GMT" pgfnum="40827"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="break;" created="Thu, 01 May 2014 20:42:37 GMT" pgfnum="40806"/>
								</outline>
							<outline text="}" created="Thu, 01 May 2014 20:42:10 GMT" pgfnum="40804"/>
							</outline>
						<outline text="}" created="Tue, 29 Apr 2014 21:25:26 GMT" pgfnum="40668"/>
						</outline>
					<outline text="catch (tryError) {" created="Tue, 29 Apr 2014 21:25:27 GMT" pgfnum="40669">
						<outline text="httpResponse.writeHead (503, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"/>
						<outline text="httpResponse.end (tryError.message);    "/>
						<outline text="console.log (&quot;handleRequest: tryError.message == &quot; + tryError.message);"/>
						<outline text="}" created="Tue, 29 Apr 2014 21:25:35 GMT" pgfnum="40670"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function startup () {">
					<outline text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot; running on port &quot; + myPort + &quot;.\n&quot;); "/>
					<outline text="http.createServer (handleRequest).listen (myPort);"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="startup ();"/>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				</outline>
			<outline text="index.html">
				<outline text=""/>
				</outline>
			</outline>
		<outline text="build script" created="Thu, 19 Aug 2021 21:00:00 GMT">
			<outline text="nodeEditorSuite.utilities.buildOpmlValidator ()"/>
			</outline>
		</body>
	</opml>
